# Урок 14. SQL. Домашнее задание

На этой неделе мы начали работу с SQL и научились делать простейшие запросы к базам данных.  Сначала предлагаем применить полученные знания в тренажере, а потом попробовать написать свой простой проект с нуля.

**Шаг 0**

Создайте проект в PyCharm, поместите в ту же папку файл с базой данных.

[База данных находится тут.](https://github.com/skypro-008/lesson14/blob/master/part1/netflix.db) 

Импортируйте модуль `sqlite3` для работы с БД. 

Создайте подключение к БД с помощью метода `sqlite3.connect`.

**Шаг 1**

Реализуйте поиск по названию. Если таких фильмов несколько, выведите самый свежий. Создайте представление для роута `/movie/title` , который бы выводил данные про фильм в таком формате:

```json
{
		"title": "title",
		"country": "country",
		"release_year": 2021,
		"genre": "listed_in",
		"description": "description"
}
```

**Шаг 2**

Сделайте поиск по диапазону лет выпуска. Фильмов будет много, так что ограничьте вывод 100 тайтлами. Создайте представление для роута `/movie/year`, который бы выводил список словарей в таком формате:

```json
[
	{"title":"title",
	 "release_year": 2021},
	{"title":"title",
	 "release_year": 2020}
]
```

**Шаг 3**

Реализуйте поиск по рейтингу. Определите группы: для детей, для семейного просмотра, для взрослых.

- G — нет возрастных ограничений.
- PG — желательно присутствие родителей.
- PG-13 — для детей от 13 лет в присутствии родителей.
- R — дети до 16 лет допускаются на сеанс только в присутствии родителей.
- NC-17 — дети до 17 лет не допускаются.

Создайте несколько роутов в соответствии с определенными группами. Выведите в каждом список словарей, содержащий информацию о названии, рейтинге и описании.

```python
Формат запроса:

/rating/children #(включаем сюда рейтинг G)

/rating/family   #(PG, PG-13)

/rating/adult    #(R, NC-17)
```

```python
Формат ответа:

[
	{"title":"title",
	 "rating": "rating",
	 "description":"description"},
	{"title":"title",
	 "rating": "rating",
	 "description":"description"},
]
```

**Шаг 4**

Напишите функцию, которая получает название жанра в качестве аргумента и возвращает 10 самых свежих фильмов в формате json. В результате должно содержаться название и описание каждого фильма.

**Шаг 5**

Напишите функцию, которая получает в качестве аргумента имена двух актеров, сохраняет всех актеров из колонки cast и возвращает список тех, кто играет с ними в паре больше 2 раз. В качестве теста можно передать: Rose McIver и Ben Lamb, Jack Black и Dustin Hoffman.

**Шаг 6**

Напишите функцию, с помощью которой можно будет передавать тип картины (фильм или сериал), год выпуска и ее жанр в БД с помощью SQL-запроса и получать на выходе список названий картин с их описаниями в JSON.

### Критерии проверки

- [ ]  Правильно выполнено подключение к базе данных.
- [ ]  Правильно сформирован запрос SELECT с выборкой по одному полю.
- [ ]  Правильно сформирован запрос SELECT с выборкой по нескольким полям.
- [ ]  Правильно сформирован запрос SELECT с оператором LIKE.
- [ ]  Правильно выполнена группировка с подсчетом количества (использована правильная агрегирующая функция).
- [ ]  Корректно использованы ключевые слова LIMIT и OFFSET.
- [ ]  Данные корректно отсортированы.
